Struct == Structured Data type: a custom data type made from a collection of other
pieces of Data.
A struct has a fixed length (a fixed number of slots for other data) and each slot has
a name.

Definition example:
(the template the computer will use. Outlining this template doesn't allocate memory.)

struct fish
{
	const char* name;
	const char* species;
	int teeth;
	int age;
};

(Creating an instance of a fish struct. This will allocate memory.)
struct fish Snappy = {"Snappy", "Piranha", 3, 5};

In this case the struct includes two pointers (to the name and the species strings)
and two ints.
But also, whole strings can be stored in there, with the normal notation.

When you assign a struct to a variable, the computer will make a copy! (Vs pointers to
a struct.)

You can also assign values to slots using the normal variable notation:
Snappy.teeth = 68;

Accessing example.
You can access the fields in an array using the '.' operator:
printf("Name: %s\n", Snappy.name);

Nesting is also possible with structs.

Assigning values to nested structs is nested to. For example

struct fish snappy = {"Snappy", "Piranha", {"meat", 0.2},{"Swimming", 2}};

TYPEDEF: allows you to give your structured data type an alias as a name, so that
you don't have to use the "struct" keyword every time you define of access a struct.

For example:

typedef struct fish
{
	const char* name;
	const char* species;
	int teeth;
	int age;
} nemo;

nemo snappy = {"Snappy", "Piranha", {"meat", 0.2},{"Swimming", 2}};

// WATCH OUT !!!
// nemo snappy;
// snappy = {"Snappy", ....}; won't actually compile, because the compiler thinks it is an
// array and not a struct inititalized in a different line.

This way you end up with two names: One for the struct and another as the name of the
type.

Always use typedef. Not doing it "is a Pain in the ass" as they say in stack overflow.

When you want the contents of a struct to be changed by a function, you will need
to pass the function a pointer to the piece of data you are trying to manipulate.
(Take a look at the bottom of the file...)

Example:
"
typedef struct turtle {

} turtle;

main()
{
	...
	turtle myrtle = {...};
	
	happy_birthday(&myrtle);
}

void happy_birthday(turtle *t)
{
	...
}
"

When you are trying to access the contents of a struct to which you only have a pointer,
you need to get to the struct by dereferencing the pointer and then access the field
you need. There are two notations available for that:

(t*).age = 89;

OR

t->age = 89;

The second means: go to the slot age in the struct pointed to by t and set it to ...
This notation is specific for pointers only, while the dot notation is usable everywhere,
as long as the variables around it are actual structs (not pointers to structs) 
or slots of structs.

Do the Safe Cracker puzzle.
<Solution>

You start from s and want to get to "GOLD!", using the struct notation to access the
different fields.
S is defined as a struct and not a pointer to a struct. To access its fields you just have
to use the '.' notation. You want to get to "numbers" because the other field is just
text. The "numbers" field is the name of a combination STRUCT (not a pointer to a struct).
To access its contents you just have to write " s.numbers"

GETTING FROM the "NUMBERS" field to GOLD!
Numbers is a "combination" struct (look at the definition) and includes a field '&gold'
Since numbers is not a pointer you can use the dot notation here too. &gold is the address
of a 'swag' structure, meaning it is a pointer to 'gold', which is a structure of type 
'swag'. So, to get to "GOLD!" you have to use the pointer. So you have the following 
notation:

<code>
numbers.swag->description
</code>

So, in full, this is the way to get to "GOLD!":

<code>
printf("Contents: %s\n", s.numbers.swag->description);
</code>

</Solution>

<head>
Unions
</head>
<body>
<p>
If you want to model something complex, from the real world a struct will do.
If, though, you want to record something such as a quantity, which has many real-world
interpretations (e.g. measurements of volume, mass, number), but only one assignable
value you can't use a struct, because
a. It will take up too much space in memory, creating all of the fields, most of which you 
are not actually going to use.
b. Someone might be able to set more than one value, which may create buggy and vulnerable 
code.
</p>
<p>
You can solve the above problem by using a UNION. A union is a variable that can have many
different types, which are specified at the point of its definition. For example:
</p>
<code>
typedef union quantity
{
	short count;
	float weight;
	float volume;
}quantity;
</code>
<p>
You can set the value of a union in any of three ways:
a. C89 standard for the first field only: this means the quantity union is a count of 4.
b. With "Designated Initializers", used to set the values other than the first: it means
set the union as a floating point weight value.
c. With the dot notation (easiest): this way you create a union in the first line and
set it to a type and give it a value in a separate line.
</p>
<code>
// a.
	quantity q = {4};
// b.
	quantity q = {.weight=1.5};
// c.
	quantity q;
	q.volume = 3.7;
</code>
<p>
Designated initializers are also very useful for use with structs, and quite a lot when
you want to initialize only some of the fields and not all of them. For example:
</p>
<code>
typedef struct vehicle
{
	const char* color;
	int gears;
	int serial_no;
	float height;
}bike;

bike my_bike = { .color = "Red", .gears = 3, .serial_no = 1234};
</code>

<subhead>
Unions can be combined with structs.
</subhead>
<p>
Just like combining structs you can also combine a struct with a union. To access the
values in the struct you use the same dot and '->' notation as you would with a normal 
struct.

To set the value of the union, though, you have to use one of the ways mentioned above
(the designated initializers are used most of the time).
</p>
</body>

<head>
Enums
</head>
<body>
<p>
Unions are useful when there is only a small number of values a text variable can have. 
These values can be called symbols and used not as text, but as possibilities.
For example:
</p>
<code>
typedef enum weekdays
{
	MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
}days;

days favorite = FRIDAY;
</code>
<p>
Enums are useful with struct and union combinations, because they allow you to keep track
of the data types used with enum, without needing to store text variables or arrays, just
symbols, with the added benefit of compilation errors in case of misspelled variables.
</p>
</body>

*************General C Programming Facts*********************************************
If you want a function to change something in an object, be it a variable, a string, 
a struct, you should assign a pointer to it and then pass that to the function. Otherwise,
passing a variable, means that the value of the variable gets copied to a new variable, local
to the new function and the original remains unchanged.